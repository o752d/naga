---
source: tests/snapshots.rs
expression: msl
---
#include <metal_stdlib>
#include <simd/simd.h>

typedef float2 type;
typedef float4 type1;
typedef float type2;
struct Particle {
	type pos;
	type vel;
};
struct SimParams {
	type2 deltaT;
	type2 rule1Distance;
	type2 rule2Distance;
	type2 rule3Distance;
	type2 rule1Scale;
	type2 rule2Scale;
	type2 rule3Scale;
};
typedef uint type3;
typedef Particle type4[5];
struct Particles {
	type4 particles;
};
typedef uint3 type5;
typedef int type6;

struct main1Input {
	type a_particlePos [[attribute(0)]];
	type a_particleVel [[attribute(1)]];
	type a_pos [[attribute(2)]];
};
struct main1Output {
	type1 gl_Position [[position]];
};
vertex main1Output main1(
	main1Input input [[stage_in]]
) {
	main1Output output;
	output.gl_Position = float4(float2(input.a_pos.x * metal::cos(-metal::atan2(input.a_particleVel.x, input.a_particleVel.y)) - input.a_pos.y * metal::sin(-metal::atan2(input.a_particleVel.x, input.a_particleVel.y)), input.a_pos.x * metal::sin(-metal::atan2(input.a_particleVel.x, input.a_particleVel.y)) + input.a_pos.y * metal::cos(-metal::atan2(input.a_particleVel.x, input.a_particleVel.y))) + input.a_particlePos, 0.0, 1.0);
	return output;
}
struct main2Input {
};
struct main2Output {
	type1 fragColor [[color(0)]];
};
fragment main2Output main2(
	main2Input input [[stage_in]]
) {
	main2Output output;
	output.fragColor = float4(1.0, 1.0, 1.0, 1.0);
	return output;
}
kernel void main3(
	constant SimParams& params [[buffer(0)]],
	constant Particles& particlesA [[buffer(1)]],
	device Particles& particlesB [[buffer(2)]],
	type5 gl_GlobalInvocationID [[thread_position_in_grid]]
) {
	type vPos;
	type vVel;
	type cMass;
	type cVel;
	type colVel;
	type6 cMassCount = 0;
	type6 cVelCount = 0;
	type pos1;
	type vel1;
	type3 i = 0;
	if (gl_GlobalInvocationID.x >= static_cast<uint>(5)) {
	}
	vPos = particlesA.particles[gl_GlobalInvocationID.x].pos;
	vVel = particlesA.particles[gl_GlobalInvocationID.x].vel;
	cMass = float2(0.0, 0.0);
	cVel = float2(0.0, 0.0);
	colVel = float2(0.0, 0.0);
	while(true) {
		if (i >= static_cast<uint>(5)) {
			break;
		}
		if (i == gl_GlobalInvocationID.x) {
			continue;
		}
		pos1 = float2(particlesA.particles[i].pos.x, particlesA.particles[i].pos.y);
		vel1 = float2(particlesA.particles[i].vel.x, particlesA.particles[i].vel.y);
		if (metal::distance(pos1, vPos) < params.rule1Distance) {
			cMass = cMass + pos1;
			cMassCount = cMassCount + 1;
		}
		if (metal::distance(pos1, vPos) < params.rule2Distance) {
			colVel = colVel - pos1 - vPos;
		}
		if (metal::distance(pos1, vPos) < params.rule3Distance) {
			cVel = cVel + vel1;
			cVelCount = cVelCount + 1;
		}
	}
	if (cMassCount == 0) {
		cMass = cMass / float2(cMassCount, cMassCount) + vPos;
	}
	if (cVelCount == 0) {
		cVel = cVel / float2(cVelCount, cVelCount);
	}
	vVel = vVel + cMass * params.rule1Scale + colVel * params.rule2Scale + cVel * params.rule3Scale;
	vVel = metal::normalize(vVel) * metal::clamp(metal::length(vVel), 0.0, 0.1);
	vPos = vPos + vVel * params.deltaT;
	if (vPos.x < -1.0) {
		vPos.x = 1.0;
	}
	if (vPos.x == 1.0) {
		vPos.x = -1.0;
	}
	if (vPos.y < -1.0) {
		vPos.y = 1.0;
	}
	if (vPos.y == 1.0) {
		vPos.y = -1.0;
	}
	particlesB.particles[gl_GlobalInvocationID.x].pos = vPos;
	particlesB.particles[gl_GlobalInvocationID.x].vel = vVel;
}

